#!/usr/bin/env bash

set -euo pipefail
cd $(dirname $0)/..

readme_src="README.src.md"
readme_dst="README.md"

function generate_toc() {
    get_headers_without_markup_from_readme | while read header_in_readme
    do
        header_formatted_as_html_anchor="$(downcase_and_transformed_without_special_chars "${header_in_readme}")"
        echo -n "**[${header_in_readme}](${header_formatted_as_html_anchor})** . "
    done
    echo ""
}

function get_headers_without_markup_from_readme() {
    cat ${readme_src} | grep "^#" | tr -d "#\;"
}

function downcase_and_transformed_without_special_chars() {
    text_to_format="${1}"
    echo "#${text_to_format}" | tr "[:upper:]" "[:lower:]"| tr " " "-" | tr -d ".?"
}

function execute_command_in_line_tagged_with_sample() {
    line="$1"
    command=$(echo $line | cut -d " " -f 2-)
    "${command}"
}

function generate_godepgraph() {
    godepgraph -s . | dot -Tpng -o _imgs/godepgraph.png
    echo '<p align="center">
<img src="https://raw.githubusercontent.com/dachad/tcpgoon/master/_imgs/godepgraph.png" width="450"/>
</p>'
}
function parse_src_template() {
    while IFS='' read -r line || [[ -n "$line" ]]
    do
        if [ $(echo $line | grep "{toc}" | wc -l) -eq 1 ]
        then
            generate_toc >> "${readme_dst}"
        elif [ $(echo $line | grep "{sample}" | wc -l) -eq 1 ]
        then
             execute_command_in_line_tagged_with_sample "${line}" >> "${readme_dst}"
        elif [ $(echo $line | grep "{godepgraph}" | wc -l) -eq 1 ]
        then
             generate_godepgraph >> "${readme_dst}"
        else
            echo "${line}" >> "${readme_dst}"
        fi
    done < "${readme_src}"
}

#main()
./_script/build
echo -n > ${readme_dst}
parse_src_template

